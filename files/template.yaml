AWSTemplateFormatVersion: "2010-09-09"
Description: Panda Sky Mixin - Media
Resources:

  OriginAccess:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: {{global.name}}-media

  {{#with bucket}}

  UploadHookRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Policies:
          - PolicyName: MediaUploadHook
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: 's3:GetObject'
                  Resource: 'arn:aws:s3:::{{preprocessing}}/*'

                - Effect: Allow
                  Action: "secretsmanager:GetSecretValue"
                  Resource: {{optimization.image.ARN}}

  UploadHook:
    DependsOn:
      - UploadHookRole
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: {{optimization.functionName}}
      Handler: lib/index.handler
      MemorySize: 512
      Runtime: nodejs8.10
      Timeout: 120
      {{#with optimization.image}}{{#with kraken}}
      Environment:
        Variables:
          callbackURL: {{callbackURL}}
          kraken: {{key}}
      {{/with}}{{/with}}
      {{#unless (isEmpty tags)}}
      Tags:
        {{#each tags}}
          - Key: {{@key}}
            Value: {{@value}}
        {{/each}}
      {{/unless}}
      Role: !GetAtt [ UploadHookRole, Arn ]
      Code:
        S3Bucket: {{@root.global.bucket}}
        S3Key: {{optimization.code}}

  UploadHookPermission:
    DependsOn:
      - UploadHook
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt [ UploadHook, Arn ]
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceAccount:
        Ref: "AWS::AccountId"
      SourceArn: "arn:aws:s3:::{{preprocessing}}"

  {{#if needsPreprocessingBucket}}
  PreprocessingBucket:
    DependsOn:
      - UploadHook
      - UploadHookPermission
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: {{preprocessing}}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "GET"
              - "PUT"
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - ETag
            MaxAge: {{expires}}
      Tags:
        - Key: bucket-type
          Value: preprocessing
      {{#each tags}}
        - Key: {{@key}}
          Value: {{@value}}
      {{/each}}
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Status: Enabled
          - ExpirationInDays: 1
            Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:CompleteMultipartUpload"
            Function: !GetAtt [ UploadHook, Arn ]
  {{/if}}

  {{#if needsFinalBucket}}
  FinalBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: {{name}}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "GET"
              - "PUT"
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - ETag
            MaxAge: {{expires}}
      Tags:
        - Key: bucket-type
          Value: final
      {{#each tags}}
        - Key: {{@key}}
          Value: {{@value}}
      {{/each}}


  # Allows anyone to *read* a given object via the CloudFront distribution, but prevents scanning of our media resources through list or through directly accessing the S3 bucket.
  FinalBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - FinalBucket
    DeletionPolicy: Retain
    Properties:
      Bucket: {{name}}
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: "arn:aws:s3:::{{name}}/*"
            Principal:
              CanonicalUser: !GetAtt [ OriginAccess, S3CanonicalUserId ]
  {{/if}}

  {{#if needsLogBucket}}
  LogBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: {{waf.logBucket}}
  {{/if}}

  {{#with waf}}
  WAF:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      Parameters:
        ActivateSqlInjectionProtectionParam: "yes"
        ActivateCrossSiteScriptingProtectionParam: "yes"
        ActivateReputationListsProtectionParam: "yes"
        ActivateBadBotProtectionParam: "yes"
        ActivateHttpFloodProtectionParam: 'yes - AWS WAF rate based rule'
        ActivateScannersProbesProtectionParam: 'yes - AWS Lambda log parser'
        EndpointType: "CloudFront"
        RequestThreshold: "{{floodThreshold}}"
        ErrorThreshold: "{{errorThreshold}}"
        WAFBlockPeriod: "{{blockTTL}}"
        AppAccessLogBucket: {{logBucket}}
      Tags:
        - Key: Substack Type
          Value: Media CDN Firewall
        {{#each ../tags}}
        - Key: {{@key}}
          Value: {{@value}}
        {{/each}}
      TemplateURL: "https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations.template"
  {{/with}}

  CloudFront:
    DependsOn:
      - WAF
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - {{hostname}}
        Comment: CloudFront Distribution of the Panda Sky Media Mixin
        DefaultCacheBehavior:
          AllowedMethods: ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
          CachedMethods: ["GET", "HEAD", "OPTIONS"]
          Compress: false
          MinTTL: 0
          MaxTTL: 31536000
          DefaultTTL: {{expires}}
          ForwardedValues:
            Cookies:
              Forward: "all"
            Headers: ["Accept", "Access-Control-Request-Headers", "Access-Control-Request-Method" ]
            QueryString: true
            QueryStringCacheKeys: ["*"]
          SmoothStreaming: false
          TargetOriginId: "MixinMediaBucket"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: ""
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: false
        Origins:
          - Id: "MixinMediaBucket"
            DomainName: {{bucketURL}}
            OriginPath: ""
            S3OriginConfig:
              OriginAccessIdentity:
                "Fn::Join":
                  - ""
                  -
                    - "origin-access-identity/cloudfront/"
                    - !Ref OriginAccess
        PriceClass: {{priceClass}}
        ViewerCertificate:
          AcmCertificateArn: {{certificate}}
          MinimumProtocolVersion: "TLSv1.2_2018"
          SslSupportMethod: "sni-only"
        Logging:
          Bucket: {{waf.logBucket}}.s3.amazonaws.com
          IncludeCookies: true
          Prefix: ""
        WebACLId: !GetAtt ["WAF", "Outputs.WAFWebACL"]
      Tags:
        - Key: CDN type
          Value: media
      {{#each tags}}
        - Key: {{@key}}
          Value: {{@value}}
      {{/each}}

  DNS:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
      - CloudFront
    Properties:
      Comment: Media endpoint
      HostedZoneName: {{hostedzone}}
      RecordSets:
        - Name: {{hostname}}
          Type: A
          AliasTarget:
            DNSName: !GetAtt [ CloudFront, DomainName ]
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2

  {{/with}}
